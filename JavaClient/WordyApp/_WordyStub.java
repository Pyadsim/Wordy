package WordyApp;


/**
* WordyApp/_WordyStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Wordy.idl
* Friday, June 23, 2023 10:47:18 AM CST
*/

public class _WordyStub extends org.omg.CORBA.portable.ObjectImpl implements WordyApp.Wordy
{

  public void login (String username, String password) throws WordyApp.WordyPackage.WrongPasswordOrUsernameException, WordyApp.WordyPackage.AccountDoesNotExistException, WordyApp.WordyPackage.AccountIsLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:WordyApp/Wordy/WrongPasswordOrUsernameException:1.0"))
                    throw WordyApp.WordyPackage.WrongPasswordOrUsernameExceptionHelper.read ($in);
                else if (_id.equals ("IDL:WordyApp/Wordy/AccountDoesNotExistException:1.0"))
                    throw WordyApp.WordyPackage.AccountDoesNotExistExceptionHelper.read ($in);
                else if (_id.equals ("IDL:WordyApp/Wordy/AccountIsLoggedInException:1.0"))
                    throw WordyApp.WordyPackage.AccountIsLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                login (username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // login


  // not be found in the database
  public void logout (String username)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logout", true);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                logout (username        );
            } finally {
                _releaseReply ($in);
            }
  } // logout


  // logs out the client.
  public int create_or_join_lobby (String username)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("create_or_join_lobby", true);
                $out.write_string (username);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return create_or_join_lobby (username        );
            } finally {
                _releaseReply ($in);
            }
  } // create_or_join_lobby


  // meet the requirement to start. The timer will be implemented in the client side.
  public void can_start (int lobbyNumber) throws WordyApp.WordyPackage.CriteriaNotMetException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("can_start", true);
                $out.write_long (lobbyNumber);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:WordyApp/Wordy/CriteriaNotMetException:1.0"))
                    throw WordyApp.WordyPackage.CriteriaNotMetExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                can_start (lobbyNumber        );
            } finally {
                _releaseReply ($in);
            }
  } // can_start


  // timer in the createOrJoinLobby has ended.
  public void verify_guess (String word, String username, int lobbyID) throws WordyApp.WordyPackage.InvalidWordException, WordyApp.WordyPackage.WordTooShortException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("verify_guess", true);
                $out.write_string (word);
                $out.write_string (username);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:WordyApp/Wordy/InvalidWordException:1.0"))
                    throw WordyApp.WordyPackage.InvalidWordExceptionHelper.read ($in);
                else if (_id.equals ("IDL:WordyApp/Wordy/WordTooShortException:1.0"))
                    throw WordyApp.WordyPackage.WordTooShortExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                verify_guess (word, username, lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // verify_guess


  // even if there are multiple players who sent it.
  public int get_score (String username, int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_score", true);
                $out.write_string (username);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_score (username, lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // get_score


  // assign score to a player every end of round.
  public String get_letters (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_letters", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_letters (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // get_letters


  // get letters from the server.
  public void reassign_letters (int lobbyID, String username)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("reassign_letters", true);
                $out.write_long (lobbyID);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                reassign_letters (lobbyID, username        );
            } finally {
                _releaseReply ($in);
            }
  } // reassign_letters


  // reassign the letters in a lobby
  public void stop_timer (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("stop_timer", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                stop_timer (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // stop_timer


  // stop or start timer
  public void start_timer (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("start_timer", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                start_timer (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // start_timer


  // starts the timer only if the user is the host of the lobby
  public void update_round (int stat, int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("update_round", true);
                $out.write_long (stat);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                update_round (stat, lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // update_round


  // updates the status of the round, whether a new round has started or not.
  public boolean get_round_stat (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_round_stat", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_round_stat (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // get_round_stat


  // gets the round status of a lobby
  public boolean is_host (String username, int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("is_host", true);
                $out.write_string (username);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return is_host (username, lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // is_host


  // determines whether the player is the host of a lobby.
  public void remove_lobby (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("remove_lobby", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                remove_lobby (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // remove_lobby


  // removes lobby when it is empty.
  public void remove_player_on_quit (int lobbyID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("remove_player_on_quit", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                remove_player_on_quit (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // remove_player_on_quit


  // removes a player on the record when they quit the game.
  public String leaderboards () throws WordyApp.WordyPackage.EmptyListException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("leaderboards", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:WordyApp/Wordy/EmptyListException:1.0"))
                    throw WordyApp.WordyPackage.EmptyListExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return leaderboards (        );
            } finally {
                _releaseReply ($in);
            }
  } // leaderboards


  // is empty or no record exists yet.
  public String lengthiest () throws WordyApp.WordyPackage.EmptyListException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("lengthiest", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:WordyApp/Wordy/EmptyListException:1.0"))
                    throw WordyApp.WordyPackage.EmptyListExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return lengthiest (        );
            } finally {
                _releaseReply ($in);
            }
  } // lengthiest

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:WordyApp/Wordy:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _WordyStub
